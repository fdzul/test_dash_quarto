---
title: "Programa de Prevención y Control del Dengue de Yucatán 2024"
format: 
  dashboard:
    logo: images/logo_cenaprece.jpeg
    nav-buttons: [twitter, github, facebook]
theme: custom.scss
---

```{r setup}

# Step 1. load the library ####
options(shiny.maxRequestSize=30*1024^2)
library(formattable)
library(tmap)
library(rmarkdown)
library(knitr)
library(shiny)
library(flexdashboard)
library(plotly)
library(boldenr)
library(magrittr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(stringr)
# library(dash)
library(ECharts2Shiny)
library(sf)


# Step 3. load the functions ####
# 1.6 hotspots cases





# Step 5. Load the RData files ####
    
    # load the blocks
    load("~/OneDrive/automatic_read_ine_2010/8.RData/block_ine10_mx.RData")
    
    # load the dengue cases hotspots
    load("/Users/fdzul/Dropbox/hotspots_2023/8.RData/cases_hotspots_agebs19.RData")
    
    # load the vector hotspots
    load("~/OneDrive/proyects/hotspots_eggs/8.RData/31_yucatan/betas/31_yucatan_zinb1_betas.RData")


```

# **Hotspots de la Transmisión de Dengue**

::: panel-tabset

### [**Merida**]{style="color:#990000"}

<html>
<head>

```{=html}
<style>
body {
  margin: 0px;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 280px 280px 280px 550px;
    grid-template-rows: 165px 165px 165px 165px;
    background-color: #772953;
    color: "#772953";
  }

  .box {
    background-color: #772953;
    color: "#772953";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_merida}

# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "31", locality = "Merida")
# Step 2. Extract the hotspots ####
hotspots <- cases_hotspots_agebs19[loc,]
mapview::mapview(hotspots <- hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_merida, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
glm.fit <- glm(hotspots_gi ~ DENV_2008 + DENV_2009 +  DENV_2010 + DENV_2011 + 
                   DENV_2012 + DENV_2013  +  DENV_2014 + 
                   DENV_2015  +  DENV_2016  +  DENV_2019 +
                   DENV_2020 + DENV_2021 +  DENV_2022 +  DENV_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                      exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_merida,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))

# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_merida,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |> dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Manzanas",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .e}
```{r gauge_AGEB_merida, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .f}
```{r gauge_casos_merida, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("success", "warning","danger"))
      )
```
:::
:::

</body>

</html>



### [**Valladolid**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 280px 280px 280px 550px;
    grid-template-rows: 165px 165px 165px 165px;
    background-color: #fff;
    color: "green";
  }

  .box {
    background-color: #cfcfc4;
    color: "green";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_valladolid}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "31", 
                                 locality = "Valladolid")
# Step 2. Extract the hotspots ####
hotspots <- cases_hotspots_agebs19[loc,]
mapview::mapview(hotspots <- hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))


```
:::

::: {.box .b}
```{r forest_plot_valladolid, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
glm.fit <- glm(hotspots_gi ~ DENV_2008 + DENV_2009 +  DENV_2010  + 
                   DENV_2012 + DENV_2013  +  DENV_2014 + 
                   DENV_2015  + DENV_2018 + DENV_2019 +
                   DENV_2020 +  DENV_2021 +  DENV_2023 +  DENV_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                      exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_valladolid,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))


# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_valladolid,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |>dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Manzanas",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .e}
```{r gauge_AGEB_valladolid, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .f}
```{r gauge_casos_valladolid, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("success", "warning","danger")))
```
:::
:::

</body>

</html>

### [**Tizimín**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 280px 280px 280px 550px;
    grid-template-rows: 165px 165px 165px 165px;
    background-color: #fff;
    color: "green";
  }

  .box {
    background-color: #cfcfc4;
    color: "green";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_tizimin}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "31", 
                                 locality = "Tizimin")
# Step 2. Extract the hotspots ####
hotspots <- cases_hotspots_agebs19[loc,]
mapview::mapview(hotspots <- hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))

```
:::

::: {.box .b}
```{r forest_plot_tizimin, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
glm.fit <- glm(hotspots_gi ~  DENV_2009 +  DENV_2010 + DENV_2011 + 
                   DENV_2012 + DENV_2013  +  
                   DENV_2015  +  DENV_2016  + DENV_2018 + DENV_2019 + DENV_2020 +
                 DENV_2021 + DENV_2022 + DENV_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                      exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_tizimin,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))


# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_tizimin,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |>dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Manzanas",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .e}
```{r gauge_AGEB_tizimin, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .f}
```{r gauge_casos_tizimin, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
      dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("success", "warning","danger"))
      )
```
:::
:::

</body>

</html>

### [**Ticul**]{style="color:#990000"}

<html>

<head>

```{=html}
<style>
body {
  margin: 0px;
}

.wrapper {
    display: grid;
    grid-gap: 2px;
    grid-template-columns: 280px 280px 280px 550px;
    grid-template-rows: 165px 165px 165px 165px;
    background-color: #fff;
    color: "green";
  }

  .box {
    background-color: #cfcfc4;
    color: "green";
    border-radius: 2px;
    padding: 5px;
    font-size: 100%;

  }

  .a {
    grid-column: 1 / 4;
    grid-row: 1 / 4;
  }
  .b {
    grid-column: 4 ;
    grid-row: 1 / 3;
  }
  .c {
    grid-column: 4 ;
    grid-row: 3 / 5 ;
  }
  .d {
    grid-column: 3;
    grid-row: 4;
  }
  .e {
    grid-column: 2;
    grid-row: 4;
  }
  .f {
    grid-column: 1;
    grid-row: 4;
  }
</style>
```
</head>

<body>

::: wrapper
::: {.box .a}
```{r hotspots_dengue_ticul}
# Step 1. extract the locality ####
loc <- rgeomex::extract_locality(cve_edo = "31", 
                                 locality = "Ticul")
# Step 2. Extract the hotspots ####
hotspots <- cases_hotspots_agebs19[loc,]
mapview::mapview(hotspots <- hotspots,
                 zcol = "intensity_gi",
                 layer.name = "Intensidad",
                 label = FALSE,
                 color = "white",
                 lwd = 0.5, 
                 col.regions =  rcartocolor::carto_pal(n = max(hotspots$intensity_gi), 
                                                       name = "OrYel"))
```
:::

::: {.box .b}
```{r forest_plot_ticul, dpi = 300, fig.height= 5,fig.width = 7,fig.align = "center", out.height='100%', out.width = '100%',fig.show = "hold"}
 
# Logistic Regression
glm.fit <- glm(hotspots_gi ~  DENV_2009 +  DENV_2010 + DENV_2011 + 
                   DENV_2012 + DENV_2013  +  DENV_2014 +
                   DENV_2016  + DENV_2018 + DENV_2019 + DENV_2020 + DENV_2021 +
                 DENV_2022 + DENV_2023,
               data = hotspots, 
               family = binomial)

result <- parameters::model_parameters(glm.fit, 
                                      exponentiate = TRUE)

plotly::ggplotly(plot(result, size_text = 1))
```
:::

::: {.box .c}
```{r power_law_plot_ticul,dpi = 300, warning=FALSE, fig.align = "center", out.width = '100%',out.height='100%',fig.show = "hold"}
# Step 7. make the function por calculate the cumulative ####
funcumsum <- function(x){
    x$cumulative_n <- cumsum(x$n_cases)
    x$perc_cumsum_n <- round((cumsum(x$n_cases)/sum(x$n_cases))*100, digits = 1)
    #x$cumulative_ha <- cumsum(x$ha)
    #x$perc_cumsum_ha <- round((cumsum(x$ha)/sum(x$ha))*100, digits = 1)
    x$id <- 1
    x$id_cumsum <- cumsum(x$id)
    x$id_perc_cum <- round((cumsum(x$id)/nrow(x))*100, digits = 1)
    x
}
# step 8.
data_pareto <- hotspots   |>
    # sf::st_drop_geometry()  |>
    # dplyr::mutate(n_cases = rowSums(dplyr::select(., dplyr::starts_with("DENV"))),
    #              loc = "locality")
    #dplyr::mutate(n_cases = rowSums(dplyr::across(DENV_2008:DENV_2021)),
    #              loc = "locality")  |>
    dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    
    dplyr::select(loc, n_cases, hotspots_gi)  |>
    dplyr::arrange(loc, desc(hotspots_gi), desc(n_cases))  |>
    dplyr::group_by(loc)  |>
    tidyr::nest()  |>
    dplyr::mutate(pareto_cases = purrr::map(data,
                                            funcumsum))  |>
    dplyr::select(-data)  |>
    tidyr::unnest(cols = c(pareto_cases))


# step 4. visualization of pareto rules 
plotly::ggplotly(denhotspots::power_law_plot(x = data_pareto))  |> plotly::layout(showlegend = FALSE)

```
:::

::: {.box .d}
```{r gauge_blocks_ticul,fig.align = "center", out.height='100%', out.width = '100%', fig.width= 1.5, fig.height=1}
y_hot <- hotspots |>dplyr::filter(hotspots_gi == 1)
centroid <- rgeomex::blocks_ine20_mx_centroid |>
  sf::st_as_sf(coords = c("x", "y"), crs = 4326)
b_loc <- centroid[hotspots, ]
b_hot <- b_loc[y_hot, ]
flexdashboard::gauge(round((nrow(b_hot)/nrow(b_loc))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Manzanas",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .e}
```{r gauge_AGEB_ticul, fig.align = "center", out.height='100%', out.width = '100%'}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)
  
flexdashboard::gauge(round((nrow(y_hot)/nrow(y))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "AGEBs",
      flexdashboard::gaugeSectors(success = c(0, 30), 
                                  warning = c(31, 50), 
                                  danger = c(51, 100),
                                  colors = c("success", "warning","danger")))
```
:::

::: {.box .f}
```{r gauge_casos_ticul, out.height='90%', out.width = '90%', fig.align = "center"}

y <- hotspots  |>
    sf::st_drop_geometry() |>
     dplyr::mutate(n_cases = rowSums(dplyr::across(dplyr::starts_with("DENV"))),
                  loc = "locality") |>
    dplyr::select(loc, n_cases, hotspots_gi) 
y_hot <- y |>dplyr::filter(hotspots_gi == 1)

flexdashboard::gauge(round((sum(y_hot$n_cases)/sum(y$n_cases))*100, digits = 1),
      min = 0, max = 100, 
      symbol = '%', 
      label = "Casos de Dengue",
      flexdashboard::gaugeSectors(success = c(11, 100), 
                                  warning = c(6, 10), 
                                  danger = c(0, 5),
                                  colors = c("success", "warning","danger"))
      )
```
:::
:::

</body>

</html>

# **Hotspots del vector del Dengue**


# **Escenarios Epidemiológicos**


:::